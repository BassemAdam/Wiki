@page
@using Microsoft.AspNetCore.Mvc.RazorPages
@model Wiki.Pages.Components._CardsArticlesPartial

@{
    int pageIndex = 0;
    if (Request.Query["page"].Count > 0) {
        pageIndex = int.Parse(Request.Query["page"]);
    }

    var pageGroups = Model.Pages.Select((page, index) => new { Page = page, Index = index })
        .GroupBy(x => x.Index / 4)
        .Select(g => g.Select(x => x.Page).ToList())
        .ToList();

    var selectedGroup = pageGroups.ElementAtOrDefault(pageIndex) ?? new List<Wiki.Models.Page>();
}

@if (selectedGroup.Any())
{
    <div class="carousel-item active">
        <div class="row">
            @foreach (var pageItem in selectedGroup)
            {
                <div class="col-12 col-md-6 col-lg-3 mb-4">
                    <div class="card h-100">
                        <div class="card-header bg-primary text-white text-center">
                            <h5 class="card-title mb-0">@pageItem.Name</h5>
                        </div>
                        <div class="card-body">
                            @if (!string.IsNullOrEmpty(pageItem.Content) && pageItem.Content.Contains("<img"))
                            {
                                <div class="image-preview">
                                    <!-- Optionally, you can hide the image on small screens by adding a class like 'd-none d-md-block' -->
                                    @Html.Raw(Model.TruncateContent(pageItem.Content))
                                </div>
                            }
                            else
                            {
                                <p class="content-preview">@Html.Raw(Model.TruncateContent(pageItem.Content))</p>
                            }
                        </div>
                        <div class="card-footer text-center">
                            <a href="/ArticleDetail/@pageItem.Id" class="btn btn-primary">
                                <i class="bi bi-box-arrow-in-right text-white"></i> 
                            </a>
                            <a hx-get="/Edit_Article/@pageItem.Id" hx-target="#content" class="btn btn-secondary ms-2">
                                <i class="bi bi-pencil text-white"></i> 
                            </a>
                            <a class="btn btn-danger ms-2"
                               hx-post="/delete-page/@pageItem.Id"
                               hx-target="#popularArticlesContainer"
                               hx-swap="outerHTML:remove"
                               hx-confirm="Are you sure you want to delete this page?">
                                <i class="bi bi-trash text-white"></i>
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <script>
        document.querySelectorAll('.carousel-control-next').forEach(button => {
            button.style.display = 'none';
        });
    </script>
    <div class="carousel-item active">
        <div class="row">
            <div class="col text-center">
                <p>No articles available.</p>
            </div>
        </div>
    </div>
}

<style>
    .image-preview img {
        max-width: 100%;
        height: auto;
        display: block;
        margin: 0 auto;
    }
    .content-preview {
        max-height: 150px; /* limit the height to prevent overflow */
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 3; /* number of lines to show */
        -webkit-box-orient: vertical;
    }
    .card-body {
        max-height: 200px; /* Adjust the max height as needed */
        overflow: hidden;
    }
    .btn .bi {
        color: white; /* set all icons inside buttons to white */
    }
</style>

<script>
    let popularPageIndex = 0;
    let recentlyAddedPageIndex = 0;

    function updateButtons(containerId, pageIndex) {
        const container = document.getElementById(containerId);
        const prevButton = container.querySelector('.carousel-control-prev');
        const nextButton = container.querySelector('.carousel-control-next');

        if (pageIndex <= 0) {
            prevButton.style.display = 'none';
        } else {
            prevButton.style.display = 'block';
        }

        const maxPageIndex = 5; // Change this as needed
        if (pageIndex >= maxPageIndex) {
            nextButton.style.display = 'none';
        } else {
            nextButton.style.display = 'block';
        }

        // Update the hx-vals attribute for the buttons
        prevButton.setAttribute('hx-vals', JSON.stringify({ page: pageIndex - 1 }));
        nextButton.setAttribute('hx-vals', JSON.stringify({ page: pageIndex + 1 }));
    }

    function handleButtonClick(button, increment, containerId) {
        let pageIndex;
        if (containerId.includes('popular')) {
            pageIndex = popularPageIndex + increment;
            if (pageIndex < 0) pageIndex = 0;
            popularPageIndex = pageIndex;
        } else {
            pageIndex = recentlyAddedPageIndex + increment;
            if (pageIndex < 0) pageIndex = 0;
            recentlyAddedPageIndex = pageIndex;
        }

        updateButtons(containerId, pageIndex);
    }

    document.querySelectorAll('.carousel-control-prev').forEach(button => {
        button.addEventListener('click', function() {
            const containerId = this.closest('.carousel-container').id;
            handleButtonClick(this, -1, containerId);
        });
    });

    document.querySelectorAll('.carousel-control-next').forEach(button => {
        button.addEventListener('click', function() {
            const containerId = this.closest('.carousel-container').id;
            handleButtonClick(this, 1, containerId);
        });
    });

    htmx.on('htmx:afterRequest', function(evt) {
        const target = evt.detail.target.closest('.carousel-container');
        if (target.id.includes('popular')) {
            updateButtons(target.id, popularPageIndex);
        } else {
            updateButtons(target.id, recentlyAddedPageIndex);
        }
    });

    updateButtons('popularArticlesContainer', popularPageIndex);
    updateButtons('recentlyAddedArticlesContainer', recentlyAddedPageIndex);
</script>
